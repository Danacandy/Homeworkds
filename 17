from sqlalchemy import create_engine, Column, Integer, String, ForeignKey
from sqlalchemy.orm import relationship, sessionmaker
from sqlalchemy.ext.declarative import declarative_base


engine = create_engine('sqlite:///school.db', echo=True)


Session = sessionmaker(bind=engine)
session = Session()


Base = declarative_base()


class Student(Base):
    __tablename__ = 'students'
    id = Column(Integer, primary_key=True)
    name = Column(String)
    age = Column(Integer)

    subjects = relationship('StudentSubject', back_populates='student')

class Subject(Base):
    __tablename__ = 'subjects'
    id = Column(Integer, primary_key=True)
    name = Column(String)

    students = relationship('StudentSubject', back_populates='subject')

class StudentSubject(Base):
    __tablename__ = 'student_subject'
    id = Column(Integer, primary_key=True)
    student_id = Column(Integer, ForeignKey('students.id'))
    subject_id = Column(Integer, ForeignKey('subjects.id'))

    student = relationship('Student', back_populates='subjects')
    subject = relationship('Subject', back_populates='students')

Base.metadata.create_all(engine)


from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from models import Student, Subject, StudentSubject

engine = create_engine('sqlite:///school.db', echo=True)

Session = sessionmaker(bind=engine)
session = Session()

english_students = session.query(Student).\
    join(StudentSubject, Student.id == StudentSubject.student_id).\
    join(Subject, StudentSubject.subject_id == Subject.id).\
    filter(Subject.name == 'English').all()

for student in english_students:
    print(student.name)


